name: Deploy Frontend to EC2

on:
  push:
    branches:
      - master
    paths:
      - 'frontend/**'
  pull_request:
    branches:
      - master
    paths:
      - 'frontend/**'

env:
  DOCKER_IMAGE_NAME: skyelectrotech-frontend
  CONTAINER_NAME: skyelectrotech-frontend-container

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest \
            --build-arg VITE_API_URL="${{ secrets.VITE_API_URL }}" \
            --build-arg VITE_APP_NAME="${{ secrets.VITE_APP_NAME }}" \
            --build-arg VITE_APP_VERSION="${{ secrets.VITE_APP_VERSION }}" .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
            --build-arg VITE_API_URL="${{ secrets.VITE_API_URL }}" \
            --build-arg VITE_APP_NAME="${{ secrets.VITE_APP_NAME }}" \
            --build-arg VITE_APP_VERSION="${{ secrets.VITE_APP_VERSION }}" .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: frontend-runner
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Pull Latest Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Stop and Remove Old Container
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true

      - name: Run New Container
        run: |
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -p 3000:8080 \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Clean up old images
        run: |
          docker image prune -f
          docker images ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }} --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | head -n -3 | awk '{print $3}' | xargs -r docker rmi || true

      - name: Verify Deployment
        run: |
          sleep 10
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "Frontend deployment successful!"
            docker logs ${{ env.CONTAINER_NAME }} --tail 20
          else
            echo "Frontend deployment failed!"
            docker logs ${{ env.CONTAINER_NAME }} --tail 50 || true
            exit 1
          fi
